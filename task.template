#include "general/base.hpp"

using namespace std;
//#define INTERACTIVE

namespace rahul
{
	constexpr std::uint32_t MAXN{static_cast<std::uint32_t>(4e5 + 7)};
	constexpr std::int32_t IINF{static_cast<std::int32_t>(2e9 + 7)};
	constexpr std::int64_t LLINF{static_cast<std::int64_t>(2e18 + 7)};
	static std::uint32_t TESTCASE{1};
	constexpr long double EPSILON{static_cast<long double>(1e-7)};

	// You're bad and probably overflowed. If you're being extra bad, you may have underflowed taking modulo or something stupid like that. Fix that.
	void solve()
	{

	}

	void setup()
	{
		std::cout << std::setprecision(12) << std::fixed;

	}

	bool bruteForceSolveCurrentIteration;

	constexpr std::int64_t stressTestIterations{};
	constexpr array<bool, 6> environment{false, true, true, true, false, false};
	// brute force all tests, bruteforce empty tests, show test numbers, show false test output, show all test output, verify single (as of now) floating point token

	void brute_force()
	{

	}

//#include "general/prng.hpp"

	void static generate_test(const std::uint64_t& seed)
	{
		std::mt19937_64 prng{seed};

	}
}


class %ClassName%
{
public:
	void solve(std::istream& in, std::ostream& out) { rahul::environment[0] || rahul::bruteForceSolveCurrentIteration ? rahul::brute_force() : rahul::solve(); }
};
